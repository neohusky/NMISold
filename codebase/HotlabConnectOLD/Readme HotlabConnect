One way I used in a project of mine (which I prefer) is by using the init run-level based rc scripts.
Basically you will encounter the command "service" to start and stop system services i.e. your personal service.
Following this method you will also have the possibility of doing "service <your script> start" for example, which is neat and handy.
NOTE: the following steps usually require root permissions. So just issue every command with sudo or log into a root shell (sudo -s, beware that everything you do is done with root permissions!!)

# update boot / reboot files
cp <your script> /etc/init.d/
# do it as soon as the device is going down,
#   both for shutdown and reboot
update-rc.d /etc/init.d/<your script> defaults


Example Script


#! /bin/sh
### BEGIN INIT INFO
# Provides:          <your script name>
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage my cool stuff
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin

. /lib/init/vars.sh
. /lib/lsb/init-functions
# If you need to source some other scripts, do it here

case "$1" in
  start)
    log_begin_msg "Starting my super cool service"
# do something
    log_end_msg $?
    exit 0
    ;;
  stop)
    log_begin_msg "Stopping the coolest service ever unfortunately"

    # do something to kill the service or cleanup or nothing

    log_end_msg $?
    exit 0
    ;;
  *)
    echo "Usage: /etc/init.d/<your script> {start|stop}"
    exit 1
    ;;
esac